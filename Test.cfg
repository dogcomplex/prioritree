<?php

// /Test
return [
	/*
	// calls function with args, stores returned value in result, 
	// compares to expected_result, marks pass/fail
	// catches any error

	// subset of /call? just returns a boolean and calls another function?
	// test functions, but do we test non-functions?
		// isn't that just validation?
		// so test is specifically for black-box function testing
	*/
	// '__extend'			=> '/call', maybe??

	'__function'		=> function() {
		$target = $this->target;
		if (!is_callable($target))
			error('Target is not callable');
		try {
			$instance_args = func_get_args();
			$args = $this->args();  // TODO merge $instance_args.  = default __test + particular call
				// TODO does $args need to be a raw array of values here, or would a raw array of service configs suffice?
			$result = $target(...$args); 
			$passed = $result === $this->expected_output();
				// TODO when expected_output is null should that be valid still? i.e. unset expectation
			$this->result = $result;

			// TODO instead of $result === $expected_output, allow testing within acceptable bounds of expected_output
				// i.e. validate it
				// might just be an __equals validator normally then

		} catch( \Error $error) {
			$this->error = $error;
			if (isset($this->expected_error))
				$passed = $this->expected_error() === $error;
			else
				$passed = false;  // since didnt expect an error
		}

		if (isset($this->additional_tests)) {
			$passed = $passed && $this->additional_tests();
			$this->messages->append($this->additional_tests->messages);
		}

		$this->passed = $passed;
		return $passed;

	},

	'__set'				=> function($value) {
		/*
		Allow shorthand setting like:
		'__test' => [$expected_result, $message, $args = [$arg1, $arg2]] or just '__test' = $expected_result if null args and message?

		*/
		if (is_array($value) && !is_assoc($value) && isset($value[0])) {
			$this->expected_result = $value[0];
			if (isset($value[1]))
				$this->message = $value[1];
			if (isset($value[2]))
				$this->args = $value[2];
		} elseif (!is_array($value)) {
			$this->expected_result = $value;
		} else {
			// TODO how best to get default Set function hmm
			\Set::set($this, $value);
		}
	},

	'target' 			=> a('../..'),
	'args'				=> [
		'__function'		=> function() {
			// converts each args to a raw value by running it as a function
			$return = [];
			foreach($this as $key => $value) {
				if (is_numeric($key))
					$return[$key] = $value();
			}
			return $return;
		}
	],
	'input'				=> a('args'),
	'output'			=> [
		// actual output
	],
	'expected_output'	=> [
		// expected output
	],
	'passed'			=> [
		'__value'			=> null, // neither passed nor failed by default since not run, no neither true nor false
		'__name'			=> function() {
			switch($this->__value()) {
				case true:
					return "Passed";
				case false:
					return "Failed";
				case null:
					return "Not Run";
				default:
					error('Invalid value');
			}
		},
		'__type'			=> '/bool',
	],

	'error'				=> [
		'__type'			=> '/error'
	],
	'expected_error'	=> [
		'__type'			=> '/error'
	],
	'additonal_tests'  	=> [
		// sub tests to run
		'__type'			=> '/tests'
	],

	'message'			=> [
		'__type'			=> '/message',
		'__function' 		=> function() {
			$test = $this->__parent();
			return $test->__name() . ' has '. $test->passed();
		}
	],
	'messages'			=> [
		'__type'			=> '/messages'
	],
	'__name'			=> function() {
		return $this->target->__name() . ' Test';
	},

	'__template'		=> function() {
		$return = $this->__name() . $this->passed->__name();
		if ($this->__passed()) {
			if (isset($this->message)) {
				$return .= '<br/> '. $this->message();
			}
			if (isset($this->messages)) {
				foreach($this->messages as $message)
					$return .= '<br/> '. $message();
			} 
		} 
		return $return;
	},

	'test_children'		=> [
		'__value'			=> true,
		'__type'			=> '/bool',
		'order'				=> [
			'__value'			=> null,
			'__type'			=> '/order'
		]
	]
];


/*
EXAMPLE

Testing to see if the black box function of $some_service() returns "FOO" or not, given that $some_service->__test is an instance of this Test class with configs:

$some_service_config = [

	// function to be tested:
	'__function'	=> function() {
		// do something
		return ( $this->some_configurable() === 1 ? "FOO" : "BAR" );
	},
	'some_configurable' = 2;
	'__name'	=> 'Some Service',


	// test suite:
	'__test' 		=> [
		// 'target'		=> '../..'  // target is some_service by default
		// 'args'		=> null,  // null / empty by default
		'expected_result'	=> "FOO",
			// could also have a full service definition.  i.e. ['__value' => 'FOO']
		// 'expected_error'	=> null	 // no error is expected, but could use this to test as try/catch
		'message'			=> "Output 'FOO' expected if configured correctly",
		// '__name'			=> 'Some Service Test' // default naming sceme


		// Filled once Test is run:  
			//(And if Test is configured to cache results after one run, or if it should be run many times throughout execution...  TMI
		// 'output'  => "BAR",
		// 'passed'  => false,
		// 'error'	 => null, // no error is generated, so no need 
	]

	// OR, could set with shorthand:
	// '__test'		=> ["FOO", "Output 'FOO' expected if configured correctly"]
];

*/