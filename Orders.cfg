<?php
namespace \Orders;
return [
	'__map'				=> [
		'__extend'			=> '/order',		
	],
	'__reductions'		=> [
		'market_volumes' 	=> [ 
			'__get'				=> function($volume) {
				// return a new order keyed by volume, 
				// with rate = the min weighted rate of all asks with sum <= volume
				// null if none

				$orders = $this->__parent->__properties;  // __contents?
				
				$weighted_sum = 0;
				$vol_so_far = 0;
				if (!$orders)
					return $this->$volume = null;
				foreach($orders as $order) {
					if ($vol_so_far + $order->volume < $volume) {
						$weighted_sum += $order->rate*$order->volume;
						$vol_so_far += $volume;
					} else {
						$weighted_sum += $order->rate*($volume - $vol_so_far);
						break;
					}
				}
				return $this->$volume = [
					'__extend'		=> '/order',
					'rate'			=> $weighted_sum / $volume,
					'volume'		=> $volume
				];
			}
		],
		'market_rates'		=> [
			// ALL the volume you can get while staying below a rate (might include partial fill of > rates)
			'__get'				=> function($rate) {
				$orders = $this->__parent->__properties;  // __contents?

				$weighted_sum = 0;
				$vol_so_far = 0;
				if (!$orders)
					return [
						'__extend'		=> '/order',
						'rate'			=> $rate,
						'volume'		=> 0
					];
				foreach($orders as $order) {
					$new_rate = ($weighted_sum + $order->rate*$order->volume)
								/ ($vol_so_far + $order->volume); 
					if ($new_rate <= $rate) {
						$weighted_sum 	+= $order->rate*$order->volume;
						$vol_so_far 	+= $volume;
					} else {
						$vol_so_far += ($weighted_sum + $order->rate*$order->volume - $rate*$vol_so_far) 
										/ $rate;  // exact amount of volume needed to get rate
						break;
					}
				}
				return $this->$rate = [
					'__extend'		=> '/order',
					'rate'			=> $rate,
					'volume'		=> $vol_so_far
				];	
			}
		],
		'limit_rates'		=> [
			// sum of all orders with rate < $rate
			'__get'				=> function($rate) {
				$orders = $this->__parent->__properties;  // __contents?

				if (!$orders)
					return [
						'__extend'		=> '/order',
						'rate'			=> $rate,
						'volume'		=> 0
					];
				$vol_so_far = 0;
				$weighted_sum = 0;
				foreach($orders as $order) {
					if ($order->rate <= $rate) {
						$vol_so_far 	+= $order->volume;
						$weighted_sum 	+= $order->rate*$order->volume;
					} else 
						break;
				}
				return $this->$rate = [
					'__extend'		=> '/order',
					'rate'	  		=> $weighted_sum / $vol_so_far,
					'volume'  		=> $vol_so_far
				];	
			}
		],
		'limit_volumes'		=> a('market_volumes')
	]
];