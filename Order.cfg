<?php
namespace \Order;
return [
	'market'			=> null, // eth-btc alias
	'from'				=> null, // eth
	'to'				=> null, // btc
	'rate'				=> [
		'__value'			=> null,
		'with_fee'			=> [
			'__value'				=> function() {
				return get('..') * get('../fees/tx/multiplier') ?: null;
			},
			'reversed'			=> function() {
				return 1 / $this->__parent->parent->__value * $this->parent->fees->tx->multiplier;   
			}
		],
		'reversed'			=> function() {
			return 1/$this->__value;
		}
	],
	'rate_reverse'			=> [
		'__get'					=> function() {
			return 1 / $this->parent->rate;
		},
		// TODO set inverting
		//'with_fee'				=> function() {
		//	return $this->__value * $this->parent;
		//},
	],
	'volume'			=> [
		'__value'			=> 0,
		'__min'				=> [
			'__extend'			=> '../market/min_volume'
		]
	],
	'volume_result'			=> function() {
		return $this->rate * $this->volume ?: 0;
	},
	'fees'				=> a('market/fees'),
	'rate_with_fee' 	=> function() {
		return $this->rate * $this->fees->tx->multiplier  ?: 0;
	},
	'rate_reverse_with_fee' => function() {
		return 1 / $this->rate_with_fee;
	},
	'volume_with_fee'	=> function() {
		return $this->volume * $this->fees->tx->multiplier - $this->fees->flat;
	},
	'volume_result_with_fee' => function() {
		return $this->rate * $this->fees->tx->multiplier;
	},


	'Quantity'	=> a('volume'),
	'Rate'		=> a('rate')  // TODO if no case sensitivity, same thing

	/* e.g.:
		from bnt
		to eth
		rate .0105
		rate_from .0
		rate_to 1/rate
		volume 88 //bnt
		volume_to rate*volume_from // eth
		volume_from 88 // bnt 
			// doesnt count fees
	*/	
];