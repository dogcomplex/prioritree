<?php

function a($alias) {
	return [
		'__alias'	=> $alias;
	];
}

function v($value) {
	return [
		'__value'	=> $value;
	];
}

return [

	'value'			=> [
		'__value'		=> null,
		'__function'	=> function($context) {
			// TODO: does there exist a clever (not-imposing-on-other-service-structures) way to use an array or string $context and never boot the class?
				// difficult part: service($context)->__value() takes precedence (i.e. must check service class first)
				// can be done with method_exists once you get the class name, but still involes checking '__service' key in array
					// which means extending/aliasing if missing, among other things
			// for now:
			$context = service($context);
			
			// class takes precedence:
			if (method_exists($context, '__value'))
				return $context->__value();
			if (!isset($context->__array))
				error('Object has no array');  // return null?
			return 
				$context->__array()['__value'] 
				?? $context->__extend()->__value()  
				?? $context->__alias()->__value() 
				?? null;		
		},
	],
/*
	PROOF NO CLEVER WAY TO AVOID SERVICE CREATING:
		// GIVEN SERVICE $resource:
			// $resource->__value();
			// $ROOT->value($resource);
				// calls $resource->__value(); anyway
		// GIVEN ARRAY $array
			// needs the Service anyway incase __value() function is defined...
			// $ROOT->service($array)->__value();
			// $ROOT->value($array)
				// return $ROOT->service($array)->__value();
				// has to do that. hm
		// GIVEN STRING '/resource'
			// /Resource::__value();
				// calls /Resource::__callStatic('__value, []);
					// boots $ROOT->{/resource}->{__value}()
					// == $ROOT->resource->__value();
				// calls $ROOT->resource->__value()
			// $ROOT->service('/resource')->__value()
			// \Root::__value('/resource');
				// calls /Root::__callStatic('__value, ['/resource']);
					// boots $ROOT->resource->__value();
		// \Resource::__value($resource);
*/

	
	/*
	resource
		__array = service representing the array (config)
			x = key on array
			OR x = key on array function but not actual array
				so maybe: 
				length = numeric length
				merge() = merge function etc
				keys
					x = key on array
				__value() = actual array value
				__invoke() = function calling __value()
		__array() = function returning php array
			shortcut via parent, but could also be resource->__array->__invoke();
		__value() = whatever actual php value we want to represent here
		__value = the value service, which may have its own validation/extension shit too...?
			__value() = the actual value, again.  hardcoded exception that __value/__value is final

	*/


	'array'			=> [
		// NOTE: this is key to functionality, and so services will always have it (reference to their current location in the tree)
		// but if they didnt (e.g. if they only had a __path instead) these functions could be used to get it:
		'__value'		=> null,
		'__function'	=> function($context) {
			$context = service($context);

			if (isset($context->__array))
				$array = $context->__array();
			else
				$array = [];
			

			switch(gettype($context)) {
				case 'array':
					$array = $context;
					break;
				case 'object':
					
				case 'string':
				default:
					$array = service($context)->__array();
					break;
				case 'NULL':
					$array = [];
			}
			if (!isset($array['__array']))
				// TODO necessary? 
				$array['__array']	= &$array;
			if ($resources)
				return service($context)->__array->merge($resources);
			
		},	
		'merge'			=> function($context, ...$merge_resources) {
			$context = service($context);


			foreach($resources as $resource) {
				$merging_array = $recurse($resource); 
				array_walk(
					$array, 
					function(&$value, $key, $new_array) {
						$
						$value = 
					},
					$merging_array
				);
			}
		},
		'to_array'		=> function($context) {
			switch(gettype($context)) {
				case 'array':
					$array = $context;
					break;
				case 'NULL':
					$array = [];
					break;
				case 'object':
					if (isset($context->__array))
						$array = $context->__array();
					elseif ($context instanceof \Closure) {
						$array = [
							'__function'	=> $context
						];
					} else if ($context instanceof \Service) {
						$array = [
							'__service'		=> $context 
						];
					} else {
						$array = [
							'__value'		=> $context
						];
					}
					break;
				default:
					$array = [
						'__value'		=> $context
					];
			}
			$array['__array'] = &$array;
			return $array;
		}
	],

	/*
	$resource->__array
		returns Service, with $resource->__array->__array() === $resource->__array()['__array']
		

	*/

	
		// USAGE:
		// $raw_value => &$resource->__value
		// $raw_value => &$resource->__value(...$args) 
			// $args could alter Value's return calculation behavior
		// $raw_value_function_return => ($resource->__value)(...$args)
			// errors if not a callable return value 
			// $args specific to the function, if any 
	

	'__default'		=> a('__value'),
		// __value should already represent a default.  this is just creating another layer (another resource)
	'__function'	=> 
		// By default, returns current value
		function() {
			return $this->__value();
		},
	'__parent'		=> [
		class ParentService extends \Service {
			/**
			ALLOWABLE FORMATS:
			__parent = &$array_reference_to_parent

			**/
			function &__invoke(...$args) {
				log_this();
				
				$array = &$this->__array();
				$null = null;
				if (!isset($array['__parent']))
					return $null;
				$parent_array = &$array['__parent'];

				// fetch or create a service out of the $parent_array
				return \Root::service($parent_array);
			}	
		}
	],

	/*
	THINKING THROUGH __function and __method differences:s

	$resource(...$args);
		// == $resource->__invoke(...$args);
		// == ($resource->__function)($resource, ...$args);
			// so $context = $resource
	$resource->__function();
		// == ($resource->__function)(null, ...$args=[]); 
			// no $context specified
	$resource->__method(...$args);
		// == ($resource->__method)(...$args);
		// == ($resource->__function)($resource, ...$args); 
			// $context is implied as $resource
	$resource->__function
		// == function class object with __invoke($context, ...$args) that isn't necessarily bindTo anything
	$resource->__function->__value()
		// == function class object again 
		OR Closure anon function looking like f($context, ...$args) 
		OR class method extracted as closure and wrapped so it can be bindTo() arbitrary $context
	$resource->__method
		// == Method class object with __invoke(...$args) that is bindTo($resource)
	$resource->__method->__value();
		// == function or method class object again
		OR Closure anon function looking like f(...$args) and bindTo($resource), possibly wrapping a __function closure: return $__function($this, ...$args)
		OR class method extracted as closure and bindTo($resource)
	*/

	
/**

	// WAYS OF ACCESSING:
	// getting the resource:  \Resource 
		// $resource = $ROOT->resource 
			// GET \Resource [return_type = service]
		// \Resource::__service() 
			// POST \Resource\__Service [[], [return_type = service]]
		// \Root::service('/resource');
			// POST \Service [['/resource'], [return_type = service]]
	// getting the resource's method: \Resource\__Method
		// $resource->__method 
			// GET \Root\__Method [return_type = service]
		// \Resource\__Method::__service();
			// POST \Resource\__Method\__Service [[], [return_type = service]]
	// getting the resource's function: \Resource\__Function
		// $resource->__function 
			// GET \Root\__Function [return_type = service]
		// \Resource\__Function::__service();
			// POST \Resource\__Function\__Service [[], [return_type = service]]
	// calling/running the resource: \Resource(...$args)
		// $ROOT->resource(...$args)
			// POST \Resource [['\Resource', ...$args]]
		// $ROOT->resource->__method(...$args)
			// POST \Resource\__Method [[...$args]] 
		// \Resource::__method(...$args)
			// POST \Resource\__Method [[...$args]]
		// $ROOT->resource->__function(...$args)
			// POST \Resource\__Function [['\Resource', ...$args]] 
		// \Resource::__function(...$args)
			// POST \Resource\__Function [['\Resource', ...$args]]
		// $ROOT->call('\resource', $args);
			// POST \Call [['\resource', $args]]
	
	// TODO chained requests?
		// \Resource::__function();
			// POST \Root\Service[resource]\__Function [function_param]
			// POST \Root\Service[resource][function_param]	
			// GET \Root\Service[resource]\__Function[function_param]
			// GET \Root\Service[resource][function_param]
	


	// DONE LINE-----------------------------------------------

	'__result'		=> a('__value'),
	'__template'	=> function() {
		return $this->__string;
	},
	'__form'		=> [
		'elements'	=> [
			'__alias'	=> '../__properties'
		]
	],
	'__cache'		=> null,
		// whether to cache or not (true/false?) and any caching settings to override defaults

	// LAYERING/REFERENCING:

	// '__alias'	=> null,
	// '__extend'	=> null,
	// '__layers'	=> null,
	'__config'		=> [
		'__class'	=> '/Config'
		// TODO config settings
	],
	'__service'		=> a('__object'),
	'__class'		=> '/Resource',
	//'__dependencies'	=> ['/some_resource', '/some_other'],
	'__dependencies'	=> [
		'__error'			=> [
			'level'				=> E_COMPILE_ERROR
		]
	],
	'__require'		=> a('__dependencies'),
		// indicates resources that this class uses and must be present else face a fatal validation error
		// system may preload these in preparation
	'__include'		=> [
		// less severe consequences to __require, throwing lesser error if missing
		'__extend'		=> '__require',
		'__error'		=> [
			'level'			=> E_WARNING
		]		
	], 

	// IDENTIFICATION
	'__key'			=> 		
		function() {
			if (!isset($this->__parent->__path))
				return null;
			return substr(
				$path = $this->__parent->__path, 
				strrpos($path, '/') + 1
			);
		},
	'__path'		=> 
		function() {
			if (isset($this->__parent->__parent)) {
				if (!isset($this->__parent->__parent->__path) || !isset($this->__parent->__key))
					return null;
				return $this->__parent->__parent->__path .'/'. $this->__parent->__key;
			} else 
				return '/'; // Root
		},
	'__id'			=> [
		// globally-unique identifier for a resource.  by default same as __path, but may be overridden in special circumstances
		// e.g. may hash it
		'__extend'		=> '__path',
		// TODO how do you deal with path conflicts to the hashed result though?  might need a /h/$hash prefix or something and corresponding root service. would make sense tho
	],
	'__dir'			=> [
		// the file-folder location of the current resource (.cfg files, class files, etc)
		'__extend'		=> '__parent/__path'
		// MAY differ from __parent/__path (which is the internal representation of the resource location) but shouldnt
		// === php __DIR__ ?
	],
	'__parent'		=> 
		function() {
			if (!isset($this->__parent->__path) || !isset($this->__parent->__key))
				return null;
			return substr(
				$this->__parent->__path, strlen($this->__parent->__path) - strlen($this->__parent->__key) - 1 
			);
		},
	'__name'		=> 
		function() {
			$name = $this->__parent->__path ?? $this->__parent->__key ?? null;
			return toEnglish($name);
		},
	// '__description'	=> null,
	'__label'		=> [
		'__alias'		=> '__name'
	],
	'__labels'		=> [
		'name'			=> a('../__name'),
		'description'	=> a('../__description'),
	],
	'__locales' => [
		'__get'			=> function($path) {
			if (isset($this->__parent->__locale))
				$this->
		}
		'en-us'			=> a('__parent');	
	],
	'__locale'		=> 'en-us',

	
	
	
	
	// COMMON FUNCTIONS/HELPERS:

	'__invoke'		=> [
		'__alias'	=> '__function'
	],	
	'__isset'		=> 
		function($path=null) {
			if ($path === null)
				return isset($this->__parent->__value);
			else
				return isset($this->$path);
		},
	'__exists'		=> 
		function() { 
			return isset($this->__parent->__value);
		}, // exists
	'__properties'	=> function() {
		return array_map(
				$this->__array, 
				function($key, $value) { 
						return strpos($key, '__') !== 0 
					}
			); // something like this
	},
	'__each'		=> null
		// thing to apply to each element on __get
	'__foreach'		=> a('__each'),
	'__get'			=> [
		//'__function'	=> $todo
	],
	'__set'			=> [
		//'__function'	=> $todo
	],
	'__unset'			=> [
		//'__function'	=> $todo
	],
	'__delete'			=> a('__unset'),
	'__deconstruct'		=> a('__unset'),
	'__construct'	=> [
		// TODO
	],
	'__new'			=> a('__construct'),
	'__clone'		=> 
		function() { 
			// TODO
		},
	'__empty'		=>
		function() {
			// TODO count __properties
		},
	'__properties'	=> [
		'__function'	=> function() {
			return Map::of($this->__parent, function($key) {
				return strpos($key, '__') !== 0;
			});
		},
		// NOTE: only returns the current properties, not those in a __list (pulled from db, files, etc)
		// should it?  hmmm.  if so, needs to have its own __limit etc since ridick loading potentially
			// if so, esssentially __list anyway.  in fact that could be __list() function
	},
	'__attributes'	=> a('__properties');
	'__services'	=> [
		// assoc list of all services available to this resource
		// (indexed would be a pain for lookup, and this allows easy disabling = false/null)
		// [
		// 		'__validate' => true, 
		//   	'__config' => true,
		//		'__array' => true,
		//		'__some_function' => null // turn this off
		// ]
		// if turned off, GETs wont call it as a keyword but as a regular property
		// if empty entirely, GETs will treat as a normal array
			// chicken/egg: how to set __services = false into a normal array?
				// on GET of resource, check __services, if null then delete __services key too?
				// only doable via custom incode commands?
				// different service? e.g. __value :P
		// could be used to index service caches too? meh, they can do that themselves...
		function() {
			return Map($this, function($key, $value) {
				return strpos($key, '__') === 0;
				// isset too?
			});
		},
		// NOTE: should this return the list of ALL services callable by this resource? (i.e. not just custom ones? probably?)
	],
	'__keywords'	=> a('__services'),

	


	// VALIDATION:
	'__validate' 	=> [
		'__function' 	=> function($data=null) {
			// TODO big list of flags to check
			// should only focus on __value and flags depending on number of properties though
				// validation of each flag config itself is done by that flag

		},
		'recurse'	=> true, // validate child resources
		'valid'		=> true,
	],	
	'__dirty'		=> true,
		// mark
	'__validators'	=> [
		//'__description'	=> "additional(?) custom validators to check other than the __keywords"
	],
	'__else'		=> [
		// code to be executed if validation fails
	],
	'__invalid'		=> a('__else'),
	'__type'		=> null, 
		// allows __value to be anything
	'__min_limit'	=> [
		// min number of properties required (inclusive)
		'__value' 		=> 0,
		'__function'	=> function() {
			if (isset($this->__value))
				return count($this->__parent->__properties) >= $this->__value;
		},
		'__min'			=> 0,
		'__max'			=> a('../__max_limit'),
	],
	'__max_limit'	=> [
		'__value'		=> 10000,
		'__function'	=> function() {
			if (isset($this->__value))
				return count($this->__parent->__array) >= $this->__value;
		}
		'__min'			=> a('../__min_limit'),
		'__max'			=> 9999999999 // whatever limit we can possibly handle
		// max number of properties allowed
		// NOTE: __max_limit/__max is max_max_limit! :P
	'__min_count'	=> a('__min_limit'),
	'__max_count'	=> a('__max_limit'),

	'__min'			=> [
		// min numeric __value (inclusive)
		'__value' 		=> extend('__min'),
		'__function'	=> function() {}
			if (isset($this->__parent->__value) 
				&& is_numeric($this->__parent->__value)
			)
				return $this->__value <= $this->__parent->__value;
		},
		'__min'			=> 0,
		'__max'			=> a('../__max'),
	],
	'__max'			=> [
		// max numeric __value (inclusive)
		'__value' 		=> extend('__max')  // TODO some INT_LIMIT
		'__function'	=> function() {}
			if (
				isset($this->__parent->__value) 
				&& is_numeric($this->__parent->__value)
			)
				return $this->__value <= $this->__parent->__value;
		},
		'__min'			=> a('../__max'),
		'__max'			=> 99999  // TODO some INT_LIMIT
	],
		// min/max for numeric __value
	'__max_int'		=> a('__max'),
	'__max_float' 	=> a('__max'),
	'__min_int'		=> a('__min'),
	'__min_float' 	=> a('__min'),
	
	'__min_length'	=> 0,
	'__max_length'	=> 1000, 
		// min/max string size of __value
	'__min_array_length'  
	// '__regex'	=> null,
	'__required'	=> false,
	'__nullable'	=> false,
	'__null'		=> [
		'__alias'		=> '__nullable'
	],
	'__instanceof' 	=> null,
		// validates that a resource is extended/aliased
	'__if'			=> [  // validator idea for asserts
		'some_key'		=> 'some_value' 
	],
	'__assert'		=> a('__if'), // for now
	'__and'			=> a('__if'),
	'__or'			=> [  // idea
		'some_key'		=> 'some_value',
		'or_some_other_key'	=> 'some_other_value'
	],
	'__catch'		=> [
		// code to be executed if exception? is thrown
		// could be for validation failure.. hmm
		// __else?
	],
	// '__error'		=> 'Invalid resource'
		// error to be thrown on validation error
	'__exception'	=> a('__error'),

	// LIST:
	'__limit'		=> 10, 
	'__page'		=> null, // 1
	'__offset'		=>
		function() {
			// if not set, updates self with __page and __limit
			if (isset($this->__value))
				return $this->__value;
			$page 	= $this->__page ?? $this->__page = 1;
			$limit 	= $this->__limit ?? $this->__limit = $this->__max_limit;
				if ($limit === null) throw new Exception();	 	
			return $this->__value = ($this->__page - 1) * $this->__limit;
		}
		// results per page in (default) templates
	'__order'		=> ['__key', 'asc'],
	'__sort'		=> a('__order'),
		// order to display properties in (default) templates, and to iterate in foreach etc loops
	// '__filter'	=> null,
	// '__map'		=> null,
	// '__reduce'	=> null,



	// TYPE REPRESENTATIONS:
	'__bool'		=> [
		'__alias'	=> '../__exists';
	], 
	'__string'		=> 
		function() {
			// aka String::of($this->__parent); 
			// /*
				switch(gettype($value => $this->__parent->__value)) {
					case 'NULL':
						return '';
					case 'string':
						return $value;
					case 'array':

				}
			}
			// */
		}
	'__to_string'	=> [
		'__alias'	=> '__string'
	],
	
	'__to_array'	=> [
		// TODO
	],
	'__object'		=> 
		// chicken/egg problem
		function() {
			return new ($this->__class)();
		},
	'__file'		=> [
		'require'		=> false,
		'extension'		=> '.cfg',
		// __dir = __parent/__path
		'__function'	=> function() {
			// looks for file at $__dir . $extension
			$dir = $this->__dir ?? null;
				// note: __dir == __parent/__path by default
			if ($dir === null)
				return null;
			$ext = $this->extension ?? null;
			if ($ext !== null)
				$dir .= $ext;
			if (file_exists($dir)) {
				if ($this->require)
					return require_once($dir);
				return include_once($dir);
			}
		}
	],
	'__files'	=> [
		// TODO what are the keys? 
		// __file is '0' probably right?
		// __file is '$this->__parent->__key' ? how? __get?
		// scan for files in directory? files named __key.$something?
			// maybe this is just an extension scanner?
	],

	// REST and MVC stuff
	'__controller'	=> [
	],
	'__model'		=> [
	],
	'__db'			=> [
		// db settings to use 
	],
	// '__get'
	'__post'		=> [
		// holds any POST data for the resource
		// site access POST '/some/path' $data should invoke it with $data, so hmmm
		//'__extend'		=> '__call', ?
		// TODO and returns $response?
		// needs validation
	],
	'__put'			=> [
		'__extend'		=> '__set'
		// TODO needs validation and stuff, different than plain __set (which can be trusted by default?)
	],
	'__patch'		=> [
		'__extend'		=> '__merge'
		// TODO needs validation and stuff
	],
	'__merge'		=> [
		// config-like function for merging data into the current layer
		'__function'	=> function($resource, $over) {
			// returns $this with $resource merged overtop/under
		},
		'over'			=> true,
	],
	'__merge_over'	=> [
		// TODO can we extend functions like this too?
		'__extend'		=> '__merge',
		'over'			=> true
	],
	'__merge_under'	=> [
		'__extend'		=> '__merge',
		'over'			=> false
	],
	'__delete'		=> [
		'__extend'		=> '__destruct'
		// TODO deletes from db etc too, not just local file
			// unless unset etc do too...
	],
	'__access'		=> true,
		// default full access
		// accepts list of roles allowed
	'__roles' 		=> a('__access'),
	'__events'		=> [
		'some_event'	=> [
			// function to run in case of event
		]
	],
	'__event'		=> [
		// TODO??
	],
	//'__cookie' 	=> null // like POST
	// '__session'	=> null,
	'__module'		=> [
		// which module resource file came from? (each layer is one?)
	],
	// '__globals'		=> []
		// dumb, just equal to root services
		


	// PHP OOP
	'__abstract'	=> false,
		// marks resource as unusable unless __function is implemented on a layer above
	
	'__public'		=> true,
		// default behavior, accessible from anywhere
	'__final'		=> false,
		// marks resource as unchangeable by extending resources.  does not affect __alias
		// layering/replacing a __final resource with an identical one is allowed (?), so long as the __final = true key is preserved too (functionally equivalent)
	'__constant'	=> a('__final'),
	'__private'		=> false, 
		// marks resource as only accessible (modifiable, GETable or callable) by this resource, its sister resources, and its child resources (functions, etc).  Does not enable extensions to access. Aliases may, though.
		// /*
		people
			homer
				_donut_stash
					__private = true
					count = 10
					eat_donut
						__function
							// can access _donut_stash and below but can't access _extra_secret_stash

						eat_bite
							__function
								// can access _donut_stash and below but can't access _extra_secret_stash
					_extra_secret_stash
						__value = 'Gummi Venus'
						__private = true

				working_hard
					__function
					// can access _donut_stash and below, but can't access _extra_secret_stash
			lenny
				does_stuff
					__function
					// can't access _donut_stash or below
			homer_clone
				__extend => 'homer'
				// can't access _donut_stash or any child resources
			hello_my_name_is_mr_burns
				__alias 	=> 'homer'
				// has access to _donut_stash just like /people/homer
		//*/
	'__protected'	=> false,
		// marks resource as only accessible (modifiable, GETable or callable) by this resource, its sister resources, its child resources (functions, etc), AND any class that extends or aliases them.
		// /*
		springfielder
			likes_donuts
				__function()

		people
			homer
				__extend = springfielder
				_donut_stash
					__protected = true
					count = 10
					eat_donut
						__function
							// can access _donut_stash and below but can't access _extra_secret_stash

						eat_bite
							__function
								// can access _donut_stash and below but can't access _extra_secret_stash
					_extra_secret_stash
						__value = 'Gummi Venus'
						__protected = true
				__function
					// has access to _donut_stash, but even he can't access _extra_secret_stash directly
				working_hard
					__function
					// can access _donut_stash and below, but can't access _extra_secret_stash directly (_donut_stash can itself though)
			lenny
				does_stuff
					__function
					// can't access _donut_stash or below
			homer_clone
				__extend => 'homer'
				// can access _donut_stash, but can't access _extra_secret_stash directly (_donut_stash can itself though)
			hello_my_name_is_mr_burns
				__alias 	=> 'homer'
				// has access to _donut_stash just like /people/homer
		// */
	'__static'		=> false, 
		// declares that a resource is accessible (modifiable, GETable, callable) without creating its parent Service classes and using a proper __get path. i.e. you can jump directly into the resource and boot it
		// note: since it's accessed directly and given a $path, it can still infer its __key and __parent without booting the parent class. interesting...
		// NOTE: may screw with the intervening bootup of db, files, configs etc... hmm
	'__interface'	=> '/Resource/__Interface', // PHP class defining the required functions etc
		// this defines what you'd need to implement this resource (e.g. /a/b/__interface = 'x' means a/b can be abstracted as an x).
		// NOTE: can inherit (__extend) __interface configs, and just add '__function's to them to implement
		// little complicated on the difference between this and __extend... what should be an interface and what shouldn't?
		// practical implementation: add __final = true to everything basically...
		// FORMAT:
		// __class = '/Resource/__Interface',
		// other_configs = ...  ??

	'__implements'	=> ['/resource'],  // implies '/Resource/__Interface' if present, else just '/Resource'
		// list of classes whose interface is implemented
		// throws error on validation if any of them aren't implemented properly (same as violations of __final etc)
		// an interface is implemented if all the resources in the interface match the current resource (they could be considered __final resources)
			// note: resources may be extended (additional properties, additional args on functions, etc) but cant change the signature given in interface

	// TODOS:
	'__context'		=> [
		'__extend'		=> '__parent'
		// calling context of a resource
		// by default should be called by parent, but not necessarily true...
	],
	'__this'		=> a('.'),
	// '__switch'		=> [], // maybe just an extension of /function rather than a keyword

	// '__priority'	=> 4, 
		// number to order resources called by..? what? anything?
	'__todo' 		=> [
		'__value'		=> null,
		// place to store TODO comments! :D
		'priority'		=> 99,
			// whenever we have automated task lister
			// should accept strings too "BEFORE OCTOBER" etc heh
				// string is >1
		'called_file'	=> __FILE__,
	],
	'__deprecated'	=> null,

	'__load'		=> null,  // call this when __get loads the first time or __set 
	'__touch'		=> a('__load'), // ? 
	*/
];
