<?php

// USAGE:
	// $function_object = $resource->__function;
	// $function_result = $resource->__function(...$args);
	// $function_result = ($resource->__function)(...$args);
	// $function_result = $resource(...$args);

return [
	'__value'		=> function() {
		return $this->__value;
	},
	'__function'	=> 
		function($context = null, ...$args) {
			if (!isset($this->__value))
				throw new Exception("Function is not defined, and so can't be set");
			$closure = &$this->__value;
			if (!is_callable($closure))
				throw new Exception('Incorrect Function definition.  Function is not callable');
			if (!isset($context))
				$context = $this->context; // use default if not set
			$context = service($context); // get Service  (allows $context to be string path, array etc)
		
			$closure::bindTo($context);  // TODO configurable bind?

			if ($this->auto_extend_parent_params() === true) {
				$i = 0;
				$ref_func = new \ReflectionFunction($closure);
				foreach( $ref_func->getParameters() as $param ) {
					if (!isset($args[$i++]))
					    $args[$i] = $context->{ $param->getName() }();
					    	// Note: calls(loads) each param to get its __value
				}
			} 
			return $closure(...$args);
		},
	'context'		=> alias('__parent'),
	'auto_extend_parent_params'	=> true,
		// requires Reflection
	// '__template'		
		// TODO printout of the function text maybe (open source, after all)
	'__set'			=>
		function(&$value) {
			$this->__value = $value;
		}
		// custom since __function = $closure should set __value not __function as opposed to normal

	/*
		$resource(...$args);
			// calls $resource->__invoke(...$args)
				// which calls $resource->__function($this, ...$args)
					// which binds $this to resource/__function/__value closure (arbitrary)
					// then calls that closure with args $closure(...$args)
				// OR... gets $resource->__function as service, bindTo($this) it (once), which passes on the bind to the closure (once per change?), then calls it


		$resource->key = $value;
			// calls $resource->__set($key, $value)
				// which calls $resource->$key == $resource->__get($key)
					// which calls ($resource->__get)('__get')
						// which creates a Service object for GET at resource/__get
					// which then calls ($resource->__get)($key)
						// which creates a Service object at resource/key
					// which uses th-at to get $key_resource->__set
	*/
	// TODO go through Resource.cfg and put anything else this needs in here
];